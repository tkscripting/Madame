(function() {
    'use strict';

    let attemptCount = 0;
    const maxAttempts = 5;
    let intervalId;

    function simulateInputChange(element, value) {
        console.log('Simulating input change for element:', element, 'with value:', value);
        const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, 'value').set;
        nativeInputValueSetter.call(element, value);

        const inputEvent = new Event('input', { bubbles: true });
        element.dispatchEvent(inputEvent);
    }

    function addButton() {
        console.log('Attempting to add button...');
        const existingButton = document.querySelector('.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.css-fua1fl');
        if (existingButton) {
            console.log('Found existing search button:', existingButton);
            if (!document.querySelector('#refreshButton')) {
                console.log('Refresh button not found, creating and adding one.');
                const refreshButton = document.createElement('button');
                refreshButton.innerText = 'Refresh';
                refreshButton.id = 'refreshButton';
                refreshButton.style.cssText = `
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    position: relative;
                    box-sizing: border-box;
                    outline: 0px;
                    border: 0px;
                    margin: 0px;
                    cursor: pointer;
                    user-select: none;
                    vertical-align: middle;
                    text-decoration: none;
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
                    font-weight: 500;
                    font-size: 0.875rem;
                    line-height: 1.75;
                    text-transform: uppercase;
                    min-width: 64px;
                    padding: 6px 16px;
                    border-radius: 4px;
                    transition: none;
                    color: rgb(255, 255, 255);
                    background-color: rgb(33, 33, 33);
                    box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 1px -2px, rgba(0, 0, 0, 0.14) 0px 2px 2px 0px, rgba(0, 0, 0, 0.12) 0px 1px 5px 0px;
                    margin-left: 10px;
                `;

                existingButton.parentNode.insertBefore(refreshButton, existingButton.nextSibling);
                console.log('Refresh button added successfully.');

                refreshButton.addEventListener('click', function() {
                    console.log('Refresh button clicked.');
                    const elements = document.querySelectorAll('.css-1nyh8gd');
                    let allStrings = '';
                    elements.forEach((el) => {
                        const firstString = el.textContent.split(' ')[0];
                        allStrings += firstString + ' ';
                    });
                    console.log('Collected strings:', allStrings.trim());

                    const inputElement = document.querySelector('.MuiInputBase-input.MuiInput-input.MuiInputBase-inputMultiline.MuiInputBase-inputAdornedEnd.css-11cus7m');
                    if (inputElement) {
                        console.log('Input element found:', inputElement);
                        inputElement.focus();
                        simulateInputChange(inputElement, allStrings.trim());

                        const searchButton = document.querySelector('.MuiButtonBase-root.MuiButton-root.MuiButton-contained.MuiButton-containedPrimary.MuiButton-sizeMedium.MuiButton-containedSizeMedium.css-169cicp');
                        if (searchButton) {
                            console.log('Search button found:', searchButton);
                            searchButton.click();
                        }
                    } else {
                        console.log('Input element not found.');
                    }
                });
            } else {
                console.log('Refresh button already exists.');
            }
        } else {
            console.log('Existing search button not found.');
        }
    }

    function checkAndAddButton() {
        console.log('Checking if URL matches and attempting to add button.');
        if (location.href.includes('https://madame.ynap.biz/search')) {
            addButton();
            attemptCount++;
            console.log(`Attempt ${attemptCount} of ${maxAttempts}`);
            if (attemptCount >= maxAttempts) {
                console.log('Max attempts reached, stopping interval checks.');
                clearInterval(intervalId);
            }
        } else {
            console.log('URL does not match.');
        }
    }

    function setupURLChangeDetection() {
        window.addEventListener('popstate', checkAndAddButton);
        window.addEventListener('pushstate', checkAndAddButton);
        window.addEventListener('replacestate', checkAndAddButton);
        console.log('Added URL change detection event listeners.');

        (function(history) {
            var pushState = history.pushState;
            var replaceState = history.replaceState;
            history.pushState = function(state) {
                if (typeof history.onpushstate == 'function') {
                    history.onpushstate({ state: state });
                }
                pushState.apply(history, arguments);
                checkAndAddButton();
            };
            history.replaceState = function(state) {
                if (typeof history.onreplacestate == 'function') {
                    history.onreplacestate({ state: state });
                }
                replaceState.apply(history, arguments);
                checkAndAddButton();
            };
        })(window.history);
        console.log('Overridden history methods for URL change detection.');

        const observer = new MutationObserver(() => {
            console.log('Detected changes with MutationObserver');
            checkAndAddButton();
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        console.log('Set up MutationObserver for detecting changes in the DOM.');
    }

    console.log('Initial URL check and button add.');
    if (location.href.includes('https://madame.ynap.biz/search')) {
        checkAndAddButton();
        intervalId = setInterval(checkAndAddButton, 500);
    } else {
        console.log('Initial URL does not match.');
    }

    setupURLChangeDetection();
})();
